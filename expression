% E in Arithmetic Expression
% I in Identifier
% N in Number
% E ::= E + E | E - E | E * E | E / E | (E) | I | N



% I ::= x | y | z | u | v


% E ::= N
% N ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
:- use_rendering(svgtree).
% Define DCG rules for parsing expressions
number(number(0)) --> [0].
number(number(1)) --> [1].
number(number(2)) --> [2].
number(number(3)) --> [3].
number(number(4)) --> [4].
number(number(5)) --> [5].
number(number(6)) --> [6].
number(number(7)) --> [7].
number(number(8)) --> [8].
number(number(9)) --> [9].

variable(variable(x)) --> [x].
variable(variable(y)) --> [y].
variable(variable(z)) --> [z].
variable(variable(u)) --> [u].
variable(variable(v)) --> [v].


% E ::= E + E  | I | N
% E :: = I + E | N + E | I | N
% Beta ::= I | N | E
% Alpha ::= + E | epsilon




expr(Num) --> number(Num).
expr(Var) --> variable(Var).
expr(plus(Var,  E)) --> variable(Var), ['+'], expr(E).
expr(plus(Num,  E)) --> number(Num), ['+'], expr(E).


% E ::= E - E  | I | N
% E :: = I - E | N - E | I | N
% Beta ::= I | N | E
% Alpha ::= + E | epsilon

expr(minus(Var,  E)) --> variable(Var), ['-'], expr(E).
expr(minus(Num,  E)) --> number(Num), ['-'], expr(E).


% E ::= E * E
% E :: = I * E | N * E | I | N

expr(mult(Var,  E)) --> variable(Var), ['*'], expr(E).
expr(mult(Num,  E)) --> number(Num), ['*'], expr(E).

% E ::= E / E
% E :: = I / E | N / E | I | N

expr(div(Var,  E)) --> variable(Var), ['/'], expr(E).
expr(div(Num,  E)) --> number(Num), ['/'], expr(E).


% Define DCG rule for parsing expressions


% Example usage:
%  expr(Tree, [3], []).

% expr(Tree, [3, '+', 5], []).
% expr(Tree, [3, '-', 2, '+', 1], []).

% Define eval_expr predicate
eval_expr(Tree, Env, Result) :-
    eval(Tree, Env, Result).

% Define evaluation rules for different types of expressions
eval(number(N), _, N).

eval(variable(Var), Env, Value) :-
    lookup(Var, Env, Value).

% Define evaluation rules for different types of expressions
eval(number(N), _, N).

eval(variable(Var), Env, Value) :-
    lookup(Var, Env, Value).

eval(plus(Left, Right), Env, Result) :-
    eval(Left, Env, LeftResult),
    eval(Right, Env, RightResult),
    Result is LeftResult + RightResult.

eval(minus(Left, Right), Env, Result) :-
    eval(Left, Env, LeftResult),
    eval(Right, Env, RightResult),
    Result is LeftResult - RightResult.

eval(mult(Left, Right), Env, Result) :-
    eval(Left, Env, LeftResult),
    eval(Right, Env, RightResult),
    Result is LeftResult * RightResult.

eval(div(Left, Right), Env, Result) :-
    eval(Left, Env, LeftResult),
    eval(Right, Env, RightResult),
    Result is LeftResult / RightResult.

% Define lookup predicate to retrieve variable value from environment
lookup(Var, [(Var, Value) | _], Value).
lookup(Var, [_ | T], Value) :-
    lookup(Var, T, Value).

